#!/usr/bin/env python3

import argparse
import os

import ansible_runner
from dotenv import dotenv_values


def parse_arguments():
    """
    Parses command line arguments.

    Returns:
        Namespace: The parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description="Generate an Ansible inventory file from input hostnames."
    )
    parser.add_argument(
        "--redis", nargs="+", required=True, help="List of redis hostnames, separated by space."
    )
    parser.add_argument(
        "--metadata",
        nargs="+",
        required=True,
        help="List of metadata server hostnames, separated by space.",
    )
    parser.add_argument(
        "--backends",
        nargs="+",
        required=True,
        help="List of backend server hostnames, separated by space.",
    )
    parser.add_argument(
        "--network",
        default="infiniband",  # Setting the default value
        help="Network suffix for all hostnames. Defaults to 'infiniband'.",
    )
    parser.add_argument(
        "--env-file",
        required=False,
        help="Path to the file containing environment variables.",
    )

    return parser.parse_args()


def run_ansible_playbook(inventory, env_vars):
    """
    Runs the Ansible playbook with the specified in-memory inventory and environment variables.

    Args:
        inventory (dict): The in-memory inventory to use.
        env_vars (dict): Dictionary with environment variables.
    """
    # Get the DATACLAY_HOME environment variable
    dataclay_home = os.environ.get("DATACLAY_HOME")

    # Construct the playbook path
    playbook_path = os.path.join(dataclay_home, "config", "deploy-playbook.yaml")

    # Run the ansible playbook
    # Run the ansible playbook, including environment variables.
    runner_response = ansible_runner.run(
        private_data_dir="./",
        playbook=playbook_path,
        inventory=inventory,
        envvars=env_vars,  # Pass the environment variables here.
    )

    if runner_response.status == "successful":
        print("Ansible playbook executed successfully.")
        print("Output: ", runner_response.stdout.read())
    else:
        print(f"Ansible playbook execution failed: {runner_response.status}")
        print(f"Runner response: {runner_response.stdout.read()}")  # Fetching the stdout details
        exit(1)


if __name__ == "__main__":
    #############
    # HOSTNAMES #
    #############

    args = parse_arguments()

    network = args.network
    suffix = f".{network}" if network != "infiniband" else "-ib0"

    redis_servers = [f"{server}{suffix}" for server in args.redis]
    metadata_servers = [f"{server}{suffix}" for server in args.metadata]
    backend_servers = [f"{server}{suffix}" for server in args.backends]

    #########################
    # ENVIRONMENT VARIABLES #
    #########################

    # If --env-file is provided, use it. Otherwise, check for a '.env' file in the current directory.
    env_file_path = args.env_file if args.env_file else ".env"
    env_vars = {}
    if os.path.exists(env_file_path):
        env_vars = dotenv_values(env_file_path)

    # Add the current environment variables to the dictionary
    env_vars.update(os.environ)

    # Add the dynamic environment variables
    env_vars["DATACLAY_METADATA_HOST"] = metadata_servers[0]
    env_vars["DATACLAY_KV_HOST"] = redis_servers[0]
    env_vars["PYTHONPATH"] = f"{os.environ.get('PYTHONPATH')}:{os.getcwd()}"
    env_vars[
        "DATACLAY_JOB_PATH"
    ] = f"{os.environ.get('HOME')}/.dataclay/{os.environ.get('SLURM_JOB_ID')}"
    env_vars["DATACLAY_LOG_PATH"] = env_vars["DATACLAY_JOB_PATH"] + "/logs"
    env_vars["DATACLAY_STORAGE_PATH"] = env_vars["DATACLAY_JOB_PATH"] + "/storage"

    #############
    # INVENTORY #
    #############

    # Create an in-memory inventory
    inventory = {
        "redis": {
            "hosts": {server: {} for server in redis_servers},
        },
        "metadata": {
            "hosts": {server: {} for server in metadata_servers},
        },
        "backend": {
            "hosts": {server: {} for server in backend_servers},
        },
    }

    print("Generated inventory: ", inventory)

    ############
    # PLAYBOOK #
    ############

    run_ansible_playbook(inventory, env_vars)
